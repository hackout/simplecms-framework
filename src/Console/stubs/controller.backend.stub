<?php

namespace {{ namespace }}\{{ controllerNamespace }};

use Inertia\Inertia;
use {{ namespacedService }};
use {{ namespacedRequests }}
use Inertia\Response as InertiaResponse;
use Illuminate\Support\Facades\Validator;
use SimpleCMS\Framework\Attributes\ApiName;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use SimpleCMS\Framework\Http\Controllers\BackendController as BaseController;

class {{ class }} extends BaseController
{

    /**
     * {{ class }} 首页
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  Request         $request
     * @param  {{storeService}} $service
     * @return InertiaResponse
     */
     #[ApiName(name:'{{ class }}-首页')]
    public function index({{ storeRequest }} $request,{{storeService}} $service):InertiaResponse
    {        
        return Inertia::render('{{ modelName }}/Index', [
            'query' => [
                'page' => $request->get('page',1),
                'limit' => $request->get('limit',20),
                'keyword' => $request->get('keyword',null)
            ]
        ]);
    }

    /**
     * {{ class }} 获取列表
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  Request         $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-获取列表')]
    public function list({{ storeRequest }} $request,{{storeService}} $service):JsonResponse
    {
        $rules = [
            'keyword' => 'sometimes|nullable|max:250'
        ];
        $messages = [
            'keyword.max' => '关键词最大支持250个字符'
        ];
        $data = $request->validate($rules,$messages);
        $result = $service->getList($data);
        return $this->success($result);
    }

    /**
     * {{ class }} 添加信息
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  Request         $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-添加信息')]
    public function create({{ storeRequest }} $request,{{storeService}} $service):JsonResponse
    {
        $rules = [
            //
        ];
        $messages = [
            //
        ];
        $data = $request->validate($rules,$messages);
        $service->create($data);
        return $this->success();
    }

    /**
     * {{ class }} 编辑信息
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  string $id
     * @param  Request         $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-编辑信息')]
    public function update(string $id,{{ storeRequest }} $request,{{storeService}} $service):JsonResponse
    {
        $rules = [
            'id' => 'exists:{{ table }},id'
        ];
        $messages = [
            'id.exists' => '信息不存在或删除',
        ];
        $validator = Validator::make(array_merge([
            'id' => $id
        ], $request->all()), $rules, $messages);
        if ($validator->fails()) {
            return $this->error($validator->errors()->first());
        }
        $data = $validator->safe()->only([
            //Todo..
        ]);
        $service->update($id,$data);
        return $this->success();
    }

    /**
     * {{ class }} 信息详情
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  string $id
     * @param  Request         $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-信息详情')]
    public function detail(string $id,{{ storeRequest }} $request,{{storeService}} $service):JsonResponse
    {
        $rules = [
            'id' => 'exists:{{ table }},id'
        ];
        $messages = [
            'id.exists' => '信息不存在或删除',
        ];
        $validator = Validator::make([
            'id' => $id
        ], $rules, $messages);
        if ($validator->fails()) {
            return $this->error($validator->errors()->first());
        }
        $result = $service->detail($id);
        return $this->success($result);
    }

    
    /**
     * {{ class }} 删除信息
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  string         $id
     * @param  Request         $request
     * @param  CommitInlineService $commitInlineService
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-删除信息')]
    public function delete(string $id,{{ storeRequest }} $request,{{storeService}} $service): JsonResponse
    {
        $rules = [
            'id' => 'exists:{{ table }},id'
        ];
        $messages = [
            'id.exists' => '信息不存在或删除',
        ];
        $validator = Validator::make([
            'id' => $id
        ], $rules, $messages);
        if ($validator->fails()) {
            return $this->error($validator->errors()->first());
        }
        $service->delete($id,$data);
        return $this->success();
    }
    

    /**
     * {{ class }} 下载导入模板
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  {{storeService}} $service
     * @return BinaryFileResponse
     */
     #[ApiName(name:'{{ class }}-下载导入模板')]
    public function template({{storeService}} $service): BinaryFileResponse
    {
        return $service->downloadImportTemplate();
    }

    /**
     * {{ class }} 导入数据
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  {{ storeRequest }} $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-导入数据')]
    public function import({{ storeRequest }} $request,{{storeService}} $service): JsonResponse
    {
        $rules = [
            'file' => 'required|file|mimes:xls,xlsx',
        ];
        $messages = [
            'file.required' => '上传文件不能为空',
            'file.file' => '上传文件错误',
            'file.mimes' => '上传文件格式错误'
        ];
        $data = $request->validate($rules, $messages);
        $service->importFile($data['file']);
        return $this->success();
    }
    
    /**
     * {{ class }} 导出数据
     *
     * @author Dennis Lui <hackout@vip.qq.com>
     * @param  {{ storeRequest }} $request
     * @param  {{storeService}} $service
     * @return JsonResponse
     */
     #[ApiName(name:'{{ class }}-导出数据')]
    public function export({{ storeRequest }} $request, {{storeService}} $service): JsonResponse
    {
        $rules = [
            'keyword' => 'sometimes|nullable|max:250'
        ];
        $messages = [
            'keyword.max' => '关键词最大支持250个字符'
        ];
        $data = $request->validate($rules,$messages);
        $result = $service->export($data);
        return $this->success($result);
    }
}
